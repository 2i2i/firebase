// main actions:
// createBid - A
// acceptBid - B
// acceptMeeting - A
// createRoom - A

// firebase deploy --only firestore:rules

// https://firebase.google.com/docs/firestore/security/rules-structure?authuser=0#granular_operations
// https://firebase.google.com/docs/reference/rules/rules.MapDiff
// get, list; create, update, delete
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // all
    match /{document=**} {
      allow read, write: if false;
    }

    /////////////////////////
    // general
    function isAOrB(data) {
      return data.A == request.auth.uid || data.B == request.auth.uid;
    }

    /////////////////////////
    // tokens
    match /tokens/{uid} {
      // any logged in user can read
      allow write: if request.auth != null && request.auth.uid == uid;
    }

    /////////////////////////
    // users
    function meetingConsistentForLock(userId) {
      let meeting = getAfter(/databases/$(database)/documents/meetings/$(request.resource.data.meeting));
      let updatingOwnAsB = meeting.data.B == request.auth.uid && userId == request.auth.uid;
      let updatingA = meeting.data.A == userId;
      return meeting.data.status == 'ACCEPTED_B' && (updatingOwnAsB || updatingA);
    }
    function meetingConsistentForUnlockBefore() {
      let meetingBefore = get(/databases/$(database)/documents/meetings/$(resource.data.meeting));
      let amA = meetingBefore.data.A == request.auth.uid;
      let amB = meetingBefore.data.B == request.auth.uid;
      let ended = meetingBefore.data.status.matches('END_.*');
      return (amA || amB) && !ended;
    }
    function meetingConsistentForUnlockAfter() {
      let meetingAfter = getAfter(/databases/$(database)/documents/meetings/$(resource.data.meeting));
      let ending = meetingAfter.data.status.matches('END_.*');
      return ending;
    }
    function meetingConsistentForUnlock() {
      return meetingConsistentForUnlockBefore() && meetingConsistentForUnlockAfter();
    }
    function changeOnlyMeeting() {
      return request.resource.data.diff(resource.data).affectedKeys() == ['meeting'].toSet();
    }
    function userUpdate() {
      let fullUserFields = ['status', 'meeting', 'bio', 'name', 'rating', 'numRatings', 'heartbeat', 'tags', 'rule', 'loungeHistory', 'loungeHistoryIndex', 'blocked', 'friends'];
      let isFullUser = resource.data.keys().hasAll(fullUserFields);
      let k = request.resource.data.diff(resource.data).affectedKeys();
      let isUpdate = k.hasOnly(['status', 'bio', 'name', 'heartbeat', 'tags', 'rule', 'blocked', 'friends']);
      return isFullUser && isUpdate;
    }
    match /users/{userId} {
      // any logged in user can read
      allow read: if request.auth != null;
      
      // only self user can write
      // resource.data.meeting != null to avoid heartbeats of users that do not exist anymore
      // rule for update bio, name, tags, heartbeat, status
      allow update: if request.auth != null && request.auth.uid == userId && userUpdate();

      // TODO to secure more, add bid to user (null or current bid). then rules can check for bid existance and consistency
      // rule for locking user
      allow update: if request.auth != null && resource.data.meeting == null && changeOnlyMeeting() && meetingConsistentForLock(userId);
      // rule for unlocking user
      allow update: if request.auth != null && resource.data.meeting != null && changeOnlyMeeting() && meetingConsistentForUnlock();
    }

    /////////////////////////
    // bids
    // bidId matches across bidIn and bidOut
    match /users/{userId}/bidOuts/{bidId} { // userId == A
      allow read: if request.auth != null && request.auth.uid == userId;

      // addBid rule: request.auth.uid == A
      allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.B != userId && request.resource.data.active == true && request.resource.data.keys().toSet() == ['B', 'speed', 'net', 'addrA', 'active', 'txns', 'energy', 'comment'].toSet();

      // cancelOwnBid rule: request.auth.uid == A
      allow update: if request.auth != null && request.auth.uid == userId && fromActiveToInActive() && changeOnlyActive();

      // cancelNoShow rule: request.auth.uid == B
      allow update: if request.auth != null && request.auth.uid == resource.data.B && fromActiveToInActive() && changeOnlyActive();
    }
    match /users/{userId}/bidInsPublic/{bidId} { // userId == B
      allow read: if request.auth != null;

      // addBid rule: request.auth.uid == A
      allow create: if request.auth != null && request.auth.uid != userId && request.resource.data.active == true && request.resource.data.keys().toSet() == ['speed', 'net', 'active', 'ts', 'rule', 'energy'].toSet();

      // cancelOwnBid rule: request.auth.uid == A
      allow update: if request.auth != null && fromActiveToInActive() && changeOnlyActive() && request.auth.uid == get(/databases/$(database)/documents/users/$(userId)/bidInsPrivate/$(bidId)).data.A;

      // cancelNoShow rule: request.auth.uid == B
      allow update: if request.auth != null && request.auth.uid == userId && fromActiveToInActive() && changeOnlyActive();
    }
    match /users/{userId}/bidInsPrivate/{bidId} { // userId == B
      allow read: if request.auth != null && request.auth.uid == userId;

      // addBid rule: request.auth.uid == A
      allow create: if request.auth != null && request.auth.uid == request.resource.data.A && request.resource.data.keys().toSet() == ['A', 'addrA', 'comment', 'txns', 'active'].toSet();
      
      // cancelOwnBid rule: request.auth.uid == A
      allow update: if request.auth != null && fromActiveToInActive() && changeOnlyActive() && request.auth.uid == resource.data.A;

      // cancelNoShow rule: request.auth.uid == B
      allow update: if request.auth != null && request.auth.uid == userId && fromActiveToInActive() && changeOnlyActive();
    }

    function fromActiveToInActive() {
      return resource.data.active == true && request.resource.data.active == false;
    }
    function changeOnlyActive() {
      return request.resource.data.diff(resource.data).affectedKeys() == ['active'].toSet();
    }

    /////////////////////////
    // meetings
    match /meetings/{meetingId} {
      allow read: if request.auth != null && isAOrB(resource.data);
    }
    // the following allows spamming by an attacker
    // possible solution: make meetId include A and B
    match /meetings/{meetingId}/{subCollectionId}/{document=**} {
      allow read, write: if request.auth != null && subCollectionId.matches('.*' + request.auth.uid + '.*');
    }

    // update meeting
    function isEndReason() {
      return request.resource.data.status == 'END_TIMER' || 
             request.resource.data.status == 'END_A' || 
             request.resource.data.status == 'END_B' || 
             request.resource.data.status == 'END_DISCONNECT';
    }
    function alreadyEnded() {
      return resource.data.status.matches('END_.*');
    }
    function isCorrectEndPath() {
      return (request.resource.data.status == 'END_TIMER' && (resource.data.status == 'ACCEPTED_B' || resource.data.status == 'CALL_STARTED')) ||
             (request.resource.data.status == 'END_A' && request.auth.uid == resource.data.A && (resource.data.status == 'ROOM_CREATED' || resource.data.status.matches('RECEIVED_REMOTE_.') || resource.data.status == 'CALL_STARTED')) ||
             (request.resource.data.status == 'END_B' && request.auth.uid == resource.data.B && (resource.data.status == 'ROOM_CREATED' || resource.data.status.matches('RECEIVED_REMOTE_.') || resource.data.status == 'CALL_STARTED')) ||
             request.resource.data.status == 'END_DISCONNECT';
    }
    function hasCorrectFieldsForEnd() {
      return request.resource.data.diff(resource.data).affectedKeys() == ['status', 'statusHistory', 'active', 'end'].toSet();
    }
    function isEnd() {
      return !alreadyEnded() && isEndReason() && isCorrectEndPath() && hasCorrectFieldsForEnd();
    }
    function isAdvance() {
      let k = request.resource.data.diff(resource.data).affectedKeys();
      return (request.resource.data.status == 'ACCEPTED_A' && request.auth.uid == resource.data.A && resource.data.status == 'ACCEPTED_B' && k.hasOnly(['status', 'statusHistory'])) ||
             (request.resource.data.status == 'ROOM_CREATED' && request.auth.uid == resource.data.A && resource.data.status == 'ACCEPTED_A' && k.hasAll(['status', 'statusHistory', 'room'])) ||
             (request.resource.data.status == 'RECEIVED_REMOTE_A' && request.auth.uid == resource.data.A && (resource.data.status == 'ROOM_CREATED' || resource.data.status == 'RECEIVED_REMOTE_B')) ||
             (request.resource.data.status == 'RECEIVED_REMOTE_B' && request.auth.uid == resource.data.B && (resource.data.status == 'ROOM_CREATED' || resource.data.status == 'RECEIVED_REMOTE_A'));
    }
    match /meetings/{meetingId} {
      allow update: if request.auth != null && isAOrB(resource.data) && (isEnd() || isAdvance());
    }

    // create meeting
    function hasCorrectFieldsForCreate() {
      return request.resource.data.keys().toSet() == ['active', 'settled', 'A', 'B', 'addrA', 'addrB', 'energy', 'start', 'end', 'duration', 'txns', 'status', 'statusHistory', 'net', 'speed', 'room', 'coinFlowsA', 'coinFlowsB', 'lounge', 'rule'].toSet();
    }
    function hasCorrectValuesForCreate() {
      return request.auth.uid == request.resource.data.B &&
             request.resource.data.active &&
             !request.resource.data.settled &&
             request.resource.data.start == null &&
             request.resource.data.end == null &&
             request.resource.data.duration == null &&
             request.resource.data.status == 'ACCEPTED_B' &&
             request.resource.data.net != null &&
             request.resource.data.speed != null &&
             request.resource.data.room == null;
    }
    function bidsExistForCreate(meetingId) {
      let bidOut = get(/databases/$(database)/documents/users/$(request.resource.data.A)/bidOuts/$(meetingId));
      let bidInPrivate = get(/databases/$(database)/documents/users/$(request.resource.data.B)/bidInsPrivate/$(meetingId));
      return bidOut.data.B == request.auth.uid && bidInPrivate.data.A == request.resource.data.A;
    }
    match /meetings/{meetingId} {
      allow create: if request.auth != null && hasCorrectFieldsForCreate() && hasCorrectValuesForCreate() && bidsExistForCreate(meetingId);
    }

    /////////////////////////
    // ratings
    // a user could spam and create multiple ratings for the same meeting
    // they could have easily created the same correct one from the beginning
    // TODO: how to mitigate that?
    match /users/{userId}/ratings/{meetingId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid != userId && request.resource.data.keys().toSet() == ['rating', 'comment'].toSet() && isAOrB(get(/databases/$(database)/documents/meetings/$(meetingId)).data);
    }

    /////////////////////////
    // tops
    match /topSpeeds/{id} {
      allow read: if request.auth != null;
    }
    match /topDurations/{id} {
      allow read: if request.auth != null;
    }
  }
}