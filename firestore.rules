// https://firebase.google.com/docs/firestore/security/rules-structure?authuser=0#granular_operations
// https://firebase.google.com/docs/reference/rules/rules.MapDiff
// get, list; create, update, delete
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // all
    match /{document=**} {
      allow read, write: if false;
    }

    // general
    function isAOrB(data) {
      return data.A == request.auth.uid || data.B == request.auth.uid;
    }

    // users
    match /users/{userId} {
      // any logged in user can read
      allow read: if request.auth != null;
      
      // only self user can write
      // resource.data.meeting != null to avoid heartbeats of users that do not exist anymore
      allow write: if request.auth != null && request.auth.uid == userId && resource.data.meeting != null;

    }

    match /users/{userId}/private/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // bids
    // bidId matches across bidIn and bidOut
    match /users/{userId}/bidOuts/{bidId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.B != userId && request.resource.data.active == true && request.resource.data.keys().toSet() == ['B', 'speed', 'net', 'active'].toSet();
      allow update: if request.auth != null && request.auth.uid == userId && request.resource.data.active == false && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['active']);
    }
    match /users/{userId}/bidIns/{bidId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid != userId && request.resource.data.active == true && request.resource.data.keys().toSet() == ['speed', 'net', 'active'].toSet();
      allow update: if request.auth != null && request.resource.data.active == false && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['active']) && request.auth.uid == get(/databases/$(database)/documents/users/$(userId)/bidIns/$(bidId)/private/main).data.A;
    }
    match /users/{userId}/bidIns/{bidId}/private/main {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.resource.data.A == request.auth.uid && request.resource.data.keys().toSet() == ['A', 'addrA', 'comment'].toSet();
    }

    // meeting
    match /meetings/{meetingId} {
      allow read: if request.auth != null && isAOrB(resource.data);
    }
    // the following allows spamming by an attacker
    // possible solution: make meetId include A and B
    match /meetings/{meetingId}/{subCollectionId}/{document=**} {
      allow read, write: if request.auth != null && subCollectionId.matches('.*' + request.auth.uid + '.*');
    }

    // ratings
    // a user could spam and create multiple ratings for the same meeting
    // they could have easily created the same correct one from the beginning
    // TODO: how to mitigate that?
    match /users/{userId}/ratings/{meetingId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid != userId && request.resource.data.keys().toSet() == ['rating', 'comment'].toSet() && isAOrB(get(/databases/$(database)/documents/meetings/$(meetingId)).data);
    }
  }
}